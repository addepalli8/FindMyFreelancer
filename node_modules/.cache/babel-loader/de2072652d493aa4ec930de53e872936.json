{"ast":null,"code":"var _jsxFileName = \"/Users/addepalli/Downloads/FindMyFreelancer/src/components/Home/index.js\";\nimport React, { Component } from \"react\"; // importing the style from the external css file\n\nimport \"./home.css\"; // declaring the type of states used\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {}; //  binding all the necessary functions to perform state operations\n\n    this.addCompareProduct = this.addCompareProduct.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {}\n\n  addCompareProduct(productId) {\n    console.log('kokokok');\n  } // to remove a item from the compare list\n\n\n  removeCompareProduct(productId) {\n    const tempCompareList = [...this.state.compareList]; // finding the selected item exist in  the comparison list\n\n    const foundIndex = this.state.compareList.findIndex(product => product.id === productId); // check if the item exist and if exists remove it from the comparison list\n\n    if (foundIndex >= 0) {\n      tempCompareList.splice(foundIndex, 1);\n      this.setState(prevState => ({\n        compareList: tempCompareList\n      }));\n    }\n  } // show the add/edit attributes modal\n\n\n  openEditAttributes() {\n    const showEditAttributes = !this.state.showEditAttributes; // changing the flag to open the attribute modal and clearing if any search field exists\n\n    this.setState(prevState => ({\n      showEditAttributes,\n      search: \"\"\n    })); // saving the current attribute states if needed on click of cancel\n\n    if (showEditAttributes) {\n      const prevAttrState = {\n        price: this.state.price,\n        colors: this.state.colors,\n        condition: this.state.condition,\n        vendors: this.state.vendors,\n        selectall: this.state.selectall\n      };\n      this.setState(prevState => ({\n        prevAttrState\n      }));\n    }\n  } // canceling the attribute states and reverting to the previous opened states\n\n\n  cancelEditAttributes() {\n    // assigning the previous set attribute states and closing the modal\n    const prevAttrState = this.state.prevAttrState;\n    this.setState(prevState => ({\n      showEditAttributes: false,\n      price: prevAttrState.price,\n      colors: prevAttrState.colors,\n      condition: prevAttrState.condition,\n      vendors: prevAttrState.vendors,\n      selectall: prevAttrState.selectall\n    }));\n  } // submiting the attribute states\n\n\n  submitEditAttributes() {\n    //  closing the attributes modal\n    this.setState(prevState => ({\n      showEditAttributes: false\n    }));\n  } // updating the search value on change of input field\n\n\n  handleChange(e) {\n    const {\n      value\n    } = e.target; // assigning the value to the search state\n\n    this.setState(prevState => ({\n      search: value\n    }));\n  } // handeling the checkbox change of all the attributes\n\n\n  handleCheckboxChange(name, value) {\n    // assigning the values for the respective checkbox onChange of value\n    this.setState(prevState => ({\n      [name]: value\n    })); //  deselect the selectall category if any of the other fields are deselected\n\n    if (name !== \"selectall\" && value === false) {\n      this.setState(prevState => ({\n        selectall: false\n      }));\n    }\n  } // clearing the search field input text\n\n\n  clearSearch() {\n    this.setState(prevState => ({\n      search: \"\"\n    }));\n  } // rendering the checkbox section in the modal\n\n\n  renderCheckbox() {\n    // created a list of all the attributes\n    const attribList = [{\n      name: \"selectall\",\n      label: \"Select All\"\n    }, {\n      name: \"price\",\n      label: \"Price\"\n    }, {\n      name: \"colors\",\n      label: \"Colors\"\n    }, {\n      name: \"condition\",\n      label: \"Condition\"\n    }, {\n      name: \"vendors\",\n      label: \"Vendors\"\n    }]; // show only the attributes which are searched for the particular search term\n\n    if (this.state.search && this.state.search.length) {\n      const foundListLength = attribList.filter(item => this.state.search ? item.name.toLowerCase().indexOf(this.state.search.toLowerCase()) > -1 : \"\").length; // to show the no results found if search is inappropirate and button of clear search\n\n      if (foundListLength === 0) {\n        return React.createElement(\"div\", {\n          className: \"attribute-modal-no-results\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }, \"No Results found\", React.createElement(\"div\", {\n          className: \"attribute-modal-clear-search\",\n          onClick: this.clearSearch,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, \"Clear Search\"));\n      } // showing the attributes which are searched for the particular search term\n\n\n      return React.createElement(\"div\", {\n        className: \"attribute-modal-checkbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, attribList.filter(item => this.state.search ? item.name.toLowerCase().indexOf(this.state.search.toLowerCase()) > -1 : \"\").map(item => React.createElement(Checkbox, {\n        key: item.name,\n        name: item.name,\n        label: item.label,\n        value: this.state[item.name],\n        handleCheckboxChange: this.handleCheckboxChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      })));\n    } else {\n      // if not searched for anything display all the fields\n      return React.createElement(\"div\", {\n        className: \"attribute-modal-checkbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        name: \"selectall\",\n        label: \"Select All\",\n        value: this.state.selectall,\n        handleCheckboxChange: this.handleCheckboxChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }), React.createElement(Checkbox, {\n        name: \"price\",\n        label: \"Price\",\n        value: this.state.price,\n        handleCheckboxChange: this.handleCheckboxChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }), React.createElement(Checkbox, {\n        name: \"colors\",\n        label: \"Colors\",\n        value: this.state.colors,\n        handleCheckboxChange: this.handleCheckboxChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }), React.createElement(Checkbox, {\n        name: \"condition\",\n        label: \"Condition\",\n        value: this.state.condition,\n        handleCheckboxChange: this.handleCheckboxChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }), React.createElement(Checkbox, {\n        name: \"vendors\",\n        label: \"Vendors\",\n        value: this.state.vendors,\n        handleCheckboxChange: this.handleCheckboxChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }));\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, \"hello\");\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/addepalli/Downloads/FindMyFreelancer/src/components/Home/index.js"],"names":["React","Component","Home","constructor","props","state","addCompareProduct","bind","componentDidUpdate","prevProps","prevState","productId","console","log","removeCompareProduct","tempCompareList","compareList","foundIndex","findIndex","product","id","splice","setState","openEditAttributes","showEditAttributes","search","prevAttrState","price","colors","condition","vendors","selectall","cancelEditAttributes","submitEditAttributes","handleChange","e","value","target","handleCheckboxChange","name","clearSearch","renderCheckbox","attribList","label","length","foundListLength","filter","item","toLowerCase","indexOf","map","render"],"mappings":"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","sourcesContent":["// @flow\n\nimport React, { Component } from \"react\";\n// importing the style from the external css file\nimport \"./home.css\";\n\n\n// declaring the type of states used\ntype Props = {};\ntype State = {\n\n};\n\nclass Home extends Component<Props, State> {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n\n    //  binding all the necessary functions to perform state operations\n    (this: any).addCompareProduct = this.addCompareProduct.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n\n  }\n\n  addCompareProduct(productId) {\n    console.log('kokokok');\n  }\n\n  // to remove a item from the compare list\n  removeCompareProduct(productId) {\n    const tempCompareList = [...this.state.compareList];\n    // finding the selected item exist in  the comparison list\n    const foundIndex = this.state.compareList.findIndex(\n      product => product.id === productId\n    );\n    // check if the item exist and if exists remove it from the comparison list\n    if (foundIndex >= 0) {\n      tempCompareList.splice(foundIndex, 1);\n      this.setState(prevState => ({\n        compareList: tempCompareList\n      }));\n    }\n  }\n\n  // show the add/edit attributes modal\n  openEditAttributes() {\n    const showEditAttributes = !this.state.showEditAttributes;\n    // changing the flag to open the attribute modal and clearing if any search field exists\n    this.setState(prevState => ({\n      showEditAttributes,\n      search: \"\"\n    }));\n    // saving the current attribute states if needed on click of cancel\n    if (showEditAttributes) {\n      const prevAttrState = {\n        price: this.state.price,\n        colors: this.state.colors,\n        condition: this.state.condition,\n        vendors: this.state.vendors,\n        selectall: this.state.selectall\n      };\n      this.setState(prevState => ({\n        prevAttrState\n      }));\n    }\n  }\n\n  // canceling the attribute states and reverting to the previous opened states\n  cancelEditAttributes() {\n    // assigning the previous set attribute states and closing the modal\n    const prevAttrState = this.state.prevAttrState;\n    this.setState(prevState => ({\n      showEditAttributes: false,\n      price: prevAttrState.price,\n      colors: prevAttrState.colors,\n      condition: prevAttrState.condition,\n      vendors: prevAttrState.vendors,\n      selectall: prevAttrState.selectall\n    }));\n  }\n\n  // submiting the attribute states\n  submitEditAttributes() {\n    //  closing the attributes modal\n    this.setState(prevState => ({\n      showEditAttributes: false\n    }));\n  }\n\n  // updating the search value on change of input field\n  handleChange(e) {\n    const { value } = e.target;\n    // assigning the value to the search state\n    this.setState(prevState => ({\n      search: value\n    }));\n  }\n\n  // handeling the checkbox change of all the attributes\n  handleCheckboxChange(name, value) {\n    // assigning the values for the respective checkbox onChange of value\n    this.setState(prevState => ({\n      [name]: value\n    }));\n    //  deselect the selectall category if any of the other fields are deselected\n    if (name !== \"selectall\" && value === false) {\n      this.setState(prevState => ({\n        selectall: false\n      }));\n    }\n  }\n\n  // clearing the search field input text\n  clearSearch() {\n    this.setState(prevState => ({\n      search: \"\"\n    }));\n  }\n\n  // rendering the checkbox section in the modal\n  renderCheckbox() {\n    // created a list of all the attributes\n    const attribList = [\n      { name: \"selectall\", label: \"Select All\" },\n      { name: \"price\", label: \"Price\" },\n      { name: \"colors\", label: \"Colors\" },\n      { name: \"condition\", label: \"Condition\" },\n      { name: \"vendors\", label: \"Vendors\" }\n    ];\n    // show only the attributes which are searched for the particular search term\n    if (this.state.search && this.state.search.length) {\n      const foundListLength = attribList.filter(item =>\n        this.state.search\n          ? item.name.toLowerCase().indexOf(this.state.search.toLowerCase()) > -1\n          : \"\"\n      ).length;\n      // to show the no results found if search is inappropirate and button of clear search\n      if (foundListLength === 0) {\n        return (\n          <div className=\"attribute-modal-no-results\">\n            No Results found\n            <div\n              className=\"attribute-modal-clear-search\"\n              onClick={this.clearSearch}\n            >\n              Clear Search\n            </div>\n          </div>\n        );\n      }\n      // showing the attributes which are searched for the particular search term\n      return (\n        <div className=\"attribute-modal-checkbox\">\n          {attribList\n            .filter(item =>\n              this.state.search\n                ? item.name.toLowerCase().indexOf(this.state.search.toLowerCase()) > -1\n                : \"\"\n            )\n            .map(item => (\n              <Checkbox\n                key={item.name}\n                name={item.name}\n                label={item.label}\n                value={this.state[item.name]}\n                handleCheckboxChange={this.handleCheckboxChange}\n              />\n            ))}\n        </div>\n      );\n    } else {\n      // if not searched for anything display all the fields\n      return (\n        <div className=\"attribute-modal-checkbox\">\n          <Checkbox\n            name=\"selectall\"\n            label=\"Select All\"\n            value={this.state.selectall}\n            handleCheckboxChange={this.handleCheckboxChange}\n          />\n          <Checkbox\n            name=\"price\"\n            label=\"Price\"\n            value={this.state.price}\n            handleCheckboxChange={this.handleCheckboxChange}\n          />\n          <Checkbox\n            name=\"colors\"\n            label=\"Colors\"\n            value={this.state.colors}\n            handleCheckboxChange={this.handleCheckboxChange}\n          />\n          <Checkbox\n            name=\"condition\"\n            label=\"Condition\"\n            value={this.state.condition}\n            handleCheckboxChange={this.handleCheckboxChange}\n          />\n          <Checkbox\n            name=\"vendors\"\n            label=\"Vendors\"\n            value={this.state.vendors}\n            handleCheckboxChange={this.handleCheckboxChange}\n          />\n        </div>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        hello\n      </div>\n      );\n  }\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}