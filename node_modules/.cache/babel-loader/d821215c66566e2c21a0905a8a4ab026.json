{"ast":null,"code":"var _jsxFileName = \"/Users/addepalli/Downloads/FindMyFreelancer/src/components/Home/index.js\";\nimport React, { Component } from \"react\"; // importing the necessary sub-components for the comparison\n\nimport Product from \"../Product\";\nimport Checkbox from \"../Checkbox\"; // importing the style from the external css file\n\nimport \"./home.css\"; // importing the necessary images for the list all images (Cherry, orange, nuts, strawberry) and clear image\n\nimport cherryImage from \"../../images/cherry.png\";\nimport orangeImage from \"../../images/orange.png\";\nimport nutsImage from \"../../images/nuts.png\";\nimport strawberryImage from \"../../images/strawberry.png\";\nimport clearImage from \"../../images/close.png\"; // declaring the type of states used\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Creating the list of all the items and assigned images into it\n      // replaced the static colors (red, green, blue) with (#E86176, #80FFA5, #61B8E8) for the better interactions\n      //  rest of the list is not edited\n      completeList: [{\n        id: \"1\",\n        name: \"Cherry\",\n        image: cherryImage,\n        price: \"$1.99\",\n        colors: [\"#E86176\", \"#80FFA5\", \"#61B8E8\"],\n        condition: \"Fresh\",\n        description: \"Two Cherries\",\n        vendors: [\"Fresh Fruits Market\", \"Fruit Ninja\"]\n      }, {\n        id: \"2\",\n        name: \"Orange\",\n        image: orangeImage,\n        price: \"$2.99\",\n        colors: [\"#80FFA5\", \"#61B8E8\"],\n        condition: \"Frozen\",\n        description: \"Giant Orange\",\n        vendors: [\"Families Market\"]\n      }, {\n        id: \"3\",\n        name: \"Nuts\",\n        image: nutsImage,\n        price: \"$1.00\",\n        colors: [\"#E86176\"],\n        condition: \"Frozen\",\n        description: \"Mixed Nuts\",\n        vendors: [\"Amazon Distributor\"]\n      }, {\n        id: \"4\",\n        name: \"Strawberry\",\n        image: strawberryImage,\n        price: \"$1.49\",\n        colors: [\"#61B8E8\"],\n        condition: \"Fresh\",\n        description: \"Just Strawberry\",\n        vendors: [\"Big Basket\"]\n      }],\n      // list to add the items which needed to be compared\n      compareList: [],\n      // flag used to either show/hide the attributes modal control\n      showEditAttributes: false,\n      // search field to filter attributes inside the modal\n      search: \"\",\n      // all the attributes used to toggle the selected item\n      price: true,\n      colors: true,\n      condition: true,\n      vendors: true,\n      selectall: true,\n      // to save the previous selected attribute states on click of cancel in the attribute modal\n      prevAttrState: {}\n    }; //  binding all the necessary functions to perform state operations\n\n    this.addCompareProduct = this.addCompareProduct.bind(this);\n    this.removeCompareProduct = this.removeCompareProduct.bind(this);\n    this.openEditAttributes = this.openEditAttributes.bind(this);\n    this.cancelEditAttributes = this.cancelEditAttributes.bind(this);\n    this.submitEditAttributes = this.submitEditAttributes.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\n    this.clearSearch = this.clearSearch.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    //  to deselect the selectall category if any of the other fields are deselected\n    if (this.state.price && this.state.colors && this.state.condition && this.state.vendors && this.state.selectall === false) {\n      this.setState(prevState => ({\n        selectall: true\n      }));\n    } // to select all the rest of the attribute if select all is selected\n\n\n    if (this.state.selectall === true && prevState.selectall === false) {\n      this.setState(prevState => ({\n        price: true,\n        colors: true,\n        condition: true,\n        vendors: true\n      }));\n    }\n  } // to add a item to the compare list\n\n\n  addCompareProduct(productId) {\n    const tempCompareList = [...this.state.compareList]; // finding the selected item from the list\n\n    const found = this.state.completeList.find(product => product.id === productId); // check if the item exist and if exists add it to the comparison list\n\n    if (found) {\n      tempCompareList.push(found);\n      this.setState(prevState => ({\n        compareList: tempCompareList\n      }));\n    }\n  } // to remove a item from the compare list\n\n\n  removeCompareProduct(productId) {\n    const tempCompareList = [...this.state.compareList]; // finding the selected item exist in  the comparison list\n\n    const foundIndex = this.state.compareList.findIndex(product => product.id === productId); // check if the item exist and if exists remove it from the comparison list\n\n    if (foundIndex >= 0) {\n      tempCompareList.splice(foundIndex, 1);\n      this.setState(prevState => ({\n        compareList: tempCompareList\n      }));\n    }\n  } // show the add/edit attributes modal\n\n\n  openEditAttributes() {\n    const showEditAttributes = !this.state.showEditAttributes; // changing the flag to open the attribute modal and clearing if any search field exists\n\n    this.setState(prevState => ({\n      showEditAttributes,\n      search: \"\"\n    })); // saving the current attribute states if needed on click of cancel\n\n    if (showEditAttributes) {\n      const prevAttrState = {\n        price: this.state.price,\n        colors: this.state.colors,\n        condition: this.state.condition,\n        vendors: this.state.vendors,\n        selectall: this.state.selectall\n      };\n      this.setState(prevState => ({\n        prevAttrState\n      }));\n    }\n  } // canceling the attribute states and reverting to the previous opened states\n\n\n  cancelEditAttributes() {\n    // assigning the previous set attribute states and closing the modal\n    const prevAttrState = this.state.prevAttrState;\n    this.setState(prevState => ({\n      showEditAttributes: false,\n      price: prevAttrState.price,\n      colors: prevAttrState.colors,\n      condition: prevAttrState.condition,\n      vendors: prevAttrState.vendors,\n      selectall: prevAttrState.selectall\n    }));\n  } // submiting the attribute states\n\n\n  submitEditAttributes() {\n    //  closing the attributes modal\n    this.setState(prevState => ({\n      showEditAttributes: false\n    }));\n  } // updating the search value on change of input field\n\n\n  handleChange(e) {\n    const {\n      value\n    } = e.target; // assigning the value to the search state\n\n    this.setState(prevState => ({\n      search: value\n    }));\n  } // handeling the checkbox change of all the attributes\n\n\n  handleCheckboxChange(name, value) {\n    // assigning the values for the respective checkbox onChange of value\n    this.setState(prevState => ({\n      [name]: value\n    })); //  deselect the selectall category if any of the other fields are deselected\n\n    if (name !== \"selectall\" && value === false) {\n      this.setState(prevState => ({\n        selectall: false\n      }));\n    }\n  } // clearing the search field input text\n\n\n  clearSearch() {\n    this.setState(prevState => ({\n      search: \"\"\n    }));\n  } // rendering the checkbox section in the modal\n\n\n  renderCheckbox() {\n    // created a list of all the attributes\n    const attribList = [{\n      name: \"selectall\",\n      label: \"Select All\"\n    }, {\n      name: \"price\",\n      label: \"Price\"\n    }, {\n      name: \"colors\",\n      label: \"Colors\"\n    }, {\n      name: \"condition\",\n      label: \"Condition\"\n    }, {\n      name: \"vendors\",\n      label: \"Vendors\"\n    }]; // show only the attributes which are searched for the particular search term\n\n    if (this.state.search && this.state.search.length) {\n      const foundListLength = attribList.filter(item => this.state.search ? item.name.toLowerCase().indexOf(this.state.search.toLowerCase()) > -1 : \"\").length; // to show the no results found if search is inappropirate and button of clear search\n\n      if (foundListLength === 0) {\n        return React.createElement(\"div\", {\n          className: \"attribute-modal-no-results\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267\n          },\n          __self: this\n        }, \"No Results found\", React.createElement(\"div\", {\n          className: \"attribute-modal-clear-search\",\n          onClick: this.clearSearch,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269\n          },\n          __self: this\n        }, \"Clear Search\"));\n      } // showing the attributes which are searched for the particular search term\n\n\n      return React.createElement(\"div\", {\n        className: \"attribute-modal-checkbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, attribList.filter(item => this.state.search ? item.name.toLowerCase().indexOf(this.state.search.toLowerCase()) > -1 : \"\").map(item => React.createElement(Checkbox, {\n        key: item.name,\n        name: item.name,\n        label: item.label,\n        value: this.state[item.name],\n        handleCheckboxChange: this.handleCheckboxChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      })));\n    } else {\n      // if not searched for anything display all the fields\n      return React.createElement(\"div\", {\n        className: \"attribute-modal-checkbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        name: \"selectall\",\n        label: \"Select All\",\n        value: this.state.selectall,\n        handleCheckboxChange: this.handleCheckboxChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }), React.createElement(Checkbox, {\n        name: \"price\",\n        label: \"Price\",\n        value: this.state.price,\n        handleCheckboxChange: this.handleCheckboxChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }), React.createElement(Checkbox, {\n        name: \"colors\",\n        label: \"Colors\",\n        value: this.state.colors,\n        handleCheckboxChange: this.handleCheckboxChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }), React.createElement(Checkbox, {\n        name: \"condition\",\n        label: \"Condition\",\n        value: this.state.condition,\n        handleCheckboxChange: this.handleCheckboxChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }), React.createElement(Checkbox, {\n        name: \"vendors\",\n        label: \"Vendors\",\n        value: this.state.vendors,\n        handleCheckboxChange: this.handleCheckboxChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }));\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      style: {\n        overflow: this.state.showEditAttributes ? \"hidden\" : \"scroll\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"product-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, \"Compare Products\"), React.createElement(\"div\", {\n      className: \"products-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, this.state.completeList.map(product => React.createElement(Product, {\n      key: product.id,\n      product: product,\n      removeCompareProduct: this.removeCompareProduct,\n      addCompareProduct: this.addCompareProduct,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    })))), this.state.compareList && this.state.compareList.length ? React.createElement(\"div\", {\n      className: \"manage-attributes-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"manage-attribute-button\",\n      onClick: this.openEditAttributes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, \"Add/Remove Attributes\")) : null, this.state.compareList && this.state.compareList.length ? React.createElement(\"div\", {\n      className: \"comparison-section\",\n      style: {\n        display: this.state.showEditAttributes ? \"none\" : \"flex\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"comparison-product-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"comparison-fields-title\",\n      style: {\n        background: this.state.compareList && this.state.compareList.length ? \"#fff\" : \"#d5d5d8\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }), this.state.price ? React.createElement(\"div\", {\n      className: \"comparison-fields-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, \"Price\") : null, this.state.colors ? React.createElement(\"div\", {\n      className: \"comparison-fields-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, \"Colors\") : null, this.state.condition ? React.createElement(\"div\", {\n      className: \"comparison-fields-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, \"Condition\") : null, this.state.vendors ? React.createElement(\"div\", {\n      className: \"comparison-fields-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, \"Vendors\") : null), this.state.compareList.map(product => React.createElement(\"div\", {\n      key: \"cmp_\" + product.id,\n      className: \"comparison-product\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"comparison-fields\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, product.name), this.state.price ? React.createElement(\"div\", {\n      className: \"comparison-fields\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, product.price) : null, this.state.colors ? React.createElement(\"div\", {\n      className: \"comparison-fields\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, product.colors.map(item => React.createElement(\"div\", {\n      key: \"color_\" + item + product.id,\n      style: {\n        background: item\n      },\n      className: \"comparison-colors\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }))) : null, this.state.condition ? React.createElement(\"div\", {\n      className: \"comparison-fields\",\n      style: {\n        background: product.condition === \"Fresh\" ? \"#80FFA5\" : \"#E86176\",\n        color: \"#FFF\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, product.condition) : null, this.state.vendors ? React.createElement(\"div\", {\n      className: \"comparison-fields\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }, product.vendors.map(item => React.createElement(\"div\", {\n      key: \"vendor_\" + item + product.id,\n      style: {\n        marginRight: 5\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }, item))) : null))) : null, this.state.showEditAttributes ? React.createElement(\"div\", {\n      className: \"edit-attribute-modal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"attribute-modal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"attribute-modal-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }, \"Add/Remove Attributes\"), React.createElement(\"div\", {\n      className: \"attribute-modal-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        position: \"relative\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      placeholder: \"search attributes\",\n      className: \"input-text-field\",\n      type: \"text\",\n      id: \"search\",\n      name: \"search\",\n      onChange: this.handleChange,\n      value: this.state.search,\n      autoComplete: \"off\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }), this.state.search && this.state.search.length ? React.createElement(\"img\", {\n      src: clearImage,\n      className: \"clear-search-button\",\n      onClick: this.clearSearch,\n      alt: \"close\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }) : null), this.renderCheckbox()), React.createElement(\"div\", {\n      className: \"attribute-modal-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"attribute-modal-cancel\",\n      onClick: this.cancelEditAttributes,\n      style: {\n        marginRight: \"10px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(\"div\", {\n      className: \"attribute-modal-apply\",\n      onClick: this.submitEditAttributes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }, \"Apply\")))) : null);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/addepalli/Downloads/FindMyFreelancer/src/components/Home/index.js"],"names":["React","Component","Product","Checkbox","cherryImage","orangeImage","nutsImage","strawberryImage","clearImage","Home","constructor","props","state","completeList","id","name","image","price","colors","condition","description","vendors","compareList","showEditAttributes","search","selectall","prevAttrState","addCompareProduct","bind","removeCompareProduct","openEditAttributes","cancelEditAttributes","submitEditAttributes","handleChange","handleCheckboxChange","clearSearch","componentDidUpdate","prevProps","prevState","setState","productId","tempCompareList","found","find","product","push","foundIndex","findIndex","splice","e","value","target","renderCheckbox","attribList","label","length","foundListLength","filter","item","toLowerCase","indexOf","map","render","overflow","display","background","color","marginRight","position"],"mappings":"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","sourcesContent":["// @flow\n\nimport React, { Component } from \"react\";\n\n// importing the necessary sub-components for the comparison\nimport Product from \"../Product\";\nimport Checkbox from \"../Checkbox\";\n\n// importing the style from the external css file\nimport \"./home.css\";\n\n// importing the necessary images for the list all images (Cherry, orange, nuts, strawberry) and clear image\nimport cherryImage from \"../../images/cherry.png\";\nimport orangeImage from \"../../images/orange.png\";\nimport nutsImage from \"../../images/nuts.png\";\nimport strawberryImage from \"../../images/strawberry.png\";\nimport clearImage from \"../../images/close.png\";\n\n// declaring the type of states used\ntype Props = {};\ntype State = {\n  completeList: Array<Object>,\n  compareList: Array<Object>,\n  showEditAttributes: boolean,\n  search: string,\n  price: boolean,\n  colors: boolean,\n  condition: boolean,\n  vendors: boolean,\n  selectall: boolean,\n  prevAttrState: Object\n};\n\nclass Home extends Component<Props, State> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Creating the list of all the items and assigned images into it\n      // replaced the static colors (red, green, blue) with (#E86176, #80FFA5, #61B8E8) for the better interactions\n      //  rest of the list is not edited\n      completeList: [\n        {\n          id: \"1\",\n          name: \"Cherry\",\n          image: cherryImage,\n          price: \"$1.99\",\n          colors: [\"#E86176\", \"#80FFA5\", \"#61B8E8\"],\n          condition: \"Fresh\",\n          description: \"Two Cherries\",\n          vendors: [\"Fresh Fruits Market\", \"Fruit Ninja\"]\n        },\n        {\n          id: \"2\",\n          name: \"Orange\",\n          image: orangeImage,\n          price: \"$2.99\",\n          colors: [\"#80FFA5\", \"#61B8E8\"],\n          condition: \"Frozen\",\n          description: \"Giant Orange\",\n          vendors: [\"Families Market\"]\n        },\n        {\n          id: \"3\",\n          name: \"Nuts\",\n          image: nutsImage,\n          price: \"$1.00\",\n          colors: [\"#E86176\"],\n          condition: \"Frozen\",\n          description: \"Mixed Nuts\",\n          vendors: [\"Amazon Distributor\"]\n        },\n        {\n          id: \"4\",\n          name: \"Strawberry\",\n          image: strawberryImage,\n          price: \"$1.49\",\n          colors: [\"#61B8E8\"],\n          condition: \"Fresh\",\n          description: \"Just Strawberry\",\n          vendors: [\"Big Basket\"]\n        }\n      ],\n\n      // list to add the items which needed to be compared\n      compareList: [],\n\n      // flag used to either show/hide the attributes modal control\n      showEditAttributes: false,\n\n      // search field to filter attributes inside the modal\n      search: \"\",\n\n      // all the attributes used to toggle the selected item\n      price: true,\n      colors: true,\n      condition: true,\n      vendors: true,\n      selectall: true,\n\n      // to save the previous selected attribute states on click of cancel in the attribute modal\n      prevAttrState: {}\n    };\n\n    //  binding all the necessary functions to perform state operations\n    (this: any).addCompareProduct = this.addCompareProduct.bind(this);\n    (this: any).removeCompareProduct = this.removeCompareProduct.bind(this);\n    (this: any).openEditAttributes = this.openEditAttributes.bind(this);\n    (this: any).cancelEditAttributes = this.cancelEditAttributes.bind(this);\n    (this: any).submitEditAttributes = this.submitEditAttributes.bind(this);\n    (this: any).handleChange = this.handleChange.bind(this);\n    (this: any).handleCheckboxChange = this.handleCheckboxChange.bind(this);\n    (this: any).clearSearch = this.clearSearch.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    //  to deselect the selectall category if any of the other fields are deselected\n    if (\n      this.state.price &&\n      this.state.colors &&\n      this.state.condition &&\n      this.state.vendors &&\n      this.state.selectall === false\n    ) {\n      this.setState(prevState => ({\n        selectall: true\n      }));\n    }\n\n    // to select all the rest of the attribute if select all is selected\n    if (this.state.selectall === true && prevState.selectall === false) {\n      this.setState(prevState => ({\n        price: true,\n        colors: true,\n        condition: true,\n        vendors: true\n      }));\n    }\n  }\n\n  // to add a item to the compare list\n  addCompareProduct(productId) {\n    const tempCompareList = [...this.state.compareList];\n    // finding the selected item from the list\n    const found = this.state.completeList.find(\n      product => product.id === productId\n    );\n    // check if the item exist and if exists add it to the comparison list\n    if (found) {\n      tempCompareList.push(found);\n      this.setState(prevState => ({\n        compareList: tempCompareList\n      }));\n    }\n  }\n\n  // to remove a item from the compare list\n  removeCompareProduct(productId) {\n    const tempCompareList = [...this.state.compareList];\n    // finding the selected item exist in  the comparison list\n    const foundIndex = this.state.compareList.findIndex(\n      product => product.id === productId\n    );\n    // check if the item exist and if exists remove it from the comparison list\n    if (foundIndex >= 0) {\n      tempCompareList.splice(foundIndex, 1);\n      this.setState(prevState => ({\n        compareList: tempCompareList\n      }));\n    }\n  }\n\n  // show the add/edit attributes modal\n  openEditAttributes() {\n    const showEditAttributes = !this.state.showEditAttributes;\n    // changing the flag to open the attribute modal and clearing if any search field exists\n    this.setState(prevState => ({\n      showEditAttributes,\n      search: \"\"\n    }));\n    // saving the current attribute states if needed on click of cancel\n    if (showEditAttributes) {\n      const prevAttrState = {\n        price: this.state.price,\n        colors: this.state.colors,\n        condition: this.state.condition,\n        vendors: this.state.vendors,\n        selectall: this.state.selectall\n      };\n      this.setState(prevState => ({\n        prevAttrState\n      }));\n    }\n  }\n\n  // canceling the attribute states and reverting to the previous opened states\n  cancelEditAttributes() {\n    // assigning the previous set attribute states and closing the modal\n    const prevAttrState = this.state.prevAttrState;\n    this.setState(prevState => ({\n      showEditAttributes: false,\n      price: prevAttrState.price,\n      colors: prevAttrState.colors,\n      condition: prevAttrState.condition,\n      vendors: prevAttrState.vendors,\n      selectall: prevAttrState.selectall\n    }));\n  }\n\n  // submiting the attribute states\n  submitEditAttributes() {\n    //  closing the attributes modal\n    this.setState(prevState => ({\n      showEditAttributes: false\n    }));\n  }\n\n  // updating the search value on change of input field\n  handleChange(e) {\n    const { value } = e.target;\n    // assigning the value to the search state\n    this.setState(prevState => ({\n      search: value\n    }));\n  }\n\n  // handeling the checkbox change of all the attributes\n  handleCheckboxChange(name, value) {\n    // assigning the values for the respective checkbox onChange of value\n    this.setState(prevState => ({\n      [name]: value\n    }));\n    //  deselect the selectall category if any of the other fields are deselected\n    if (name !== \"selectall\" && value === false) {\n      this.setState(prevState => ({\n        selectall: false\n      }));\n    }\n  }\n\n  // clearing the search field input text\n  clearSearch() {\n    this.setState(prevState => ({\n      search: \"\"\n    }));\n  }\n\n  // rendering the checkbox section in the modal\n  renderCheckbox() {\n    // created a list of all the attributes\n    const attribList = [\n      { name: \"selectall\", label: \"Select All\" },\n      { name: \"price\", label: \"Price\" },\n      { name: \"colors\", label: \"Colors\" },\n      { name: \"condition\", label: \"Condition\" },\n      { name: \"vendors\", label: \"Vendors\" }\n    ];\n    // show only the attributes which are searched for the particular search term\n    if (this.state.search && this.state.search.length) {\n      const foundListLength = attribList.filter(item =>\n        this.state.search\n          ? item.name.toLowerCase().indexOf(this.state.search.toLowerCase()) > -1\n          : \"\"\n      ).length;\n      // to show the no results found if search is inappropirate and button of clear search\n      if (foundListLength === 0) {\n        return (\n          <div className=\"attribute-modal-no-results\">\n            No Results found\n            <div\n              className=\"attribute-modal-clear-search\"\n              onClick={this.clearSearch}\n            >\n              Clear Search\n            </div>\n          </div>\n        );\n      }\n      // showing the attributes which are searched for the particular search term\n      return (\n        <div className=\"attribute-modal-checkbox\">\n          {attribList\n            .filter(item =>\n              this.state.search\n                ? item.name.toLowerCase().indexOf(this.state.search.toLowerCase()) > -1\n                : \"\"\n            )\n            .map(item => (\n              <Checkbox\n                key={item.name}\n                name={item.name}\n                label={item.label}\n                value={this.state[item.name]}\n                handleCheckboxChange={this.handleCheckboxChange}\n              />\n            ))}\n        </div>\n      );\n    } else {\n      // if not searched for anything display all the fields\n      return (\n        <div className=\"attribute-modal-checkbox\">\n          <Checkbox\n            name=\"selectall\"\n            label=\"Select All\"\n            value={this.state.selectall}\n            handleCheckboxChange={this.handleCheckboxChange}\n          />\n          <Checkbox\n            name=\"price\"\n            label=\"Price\"\n            value={this.state.price}\n            handleCheckboxChange={this.handleCheckboxChange}\n          />\n          <Checkbox\n            name=\"colors\"\n            label=\"Colors\"\n            value={this.state.colors}\n            handleCheckboxChange={this.handleCheckboxChange}\n          />\n          <Checkbox\n            name=\"condition\"\n            label=\"Condition\"\n            value={this.state.condition}\n            handleCheckboxChange={this.handleCheckboxChange}\n          />\n          <Checkbox\n            name=\"vendors\"\n            label=\"Vendors\"\n            value={this.state.vendors}\n            handleCheckboxChange={this.handleCheckboxChange}\n          />\n        </div>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div\n        className=\"container\"\n        style={{\n          overflow: this.state.showEditAttributes ? \"hidden\" : \"scroll\"\n        }}\n      >\n        {\n          // displaying the list of all the list of products\n        }\n        <div>\n          <div className=\"product-title\">Compare Products</div>\n          <div className=\"products-container\">\n            {this.state.completeList.map(product => (\n              <Product\n                key={product.id}\n                product={product}\n                removeCompareProduct={this.removeCompareProduct}\n                addCompareProduct={this.addCompareProduct}\n              />\n            ))}\n          </div>\n        </div>\n        {\n          // showing the list of all the items added to the comparison list\n        }\n        {this.state.compareList && this.state.compareList.length ? (\n          <div className=\"manage-attributes-section\">\n            <div\n              className=\"manage-attribute-button\"\n              onClick={this.openEditAttributes}\n            >\n              Add/Remove Attributes\n            </div>\n          </div>\n        ) : null}\n        {this.state.compareList && this.state.compareList.length ? (\n          <div\n            className=\"comparison-section\"\n            style={{ display: this.state.showEditAttributes ? \"none\" : \"flex\" }}\n          >\n            <div className=\"comparison-product-title\">\n              <div\n                className=\"comparison-fields-title\"\n                style={{\n                  background:\n                    this.state.compareList && this.state.compareList.length\n                      ? \"#fff\"\n                      : \"#d5d5d8\"\n                }}\n              ></div>\n              {this.state.price ? (\n                <div className=\"comparison-fields-title\">Price</div>\n              ) : null}\n              {this.state.colors ? (\n                <div className=\"comparison-fields-title\">Colors</div>\n              ) : null}\n              {this.state.condition ? (\n                <div className=\"comparison-fields-title\">Condition</div>\n              ) : null}\n              {this.state.vendors ? (\n                <div className=\"comparison-fields-title\">Vendors</div>\n              ) : null}\n            </div>\n            {this.state.compareList.map(product => (\n              <div key={\"cmp_\" + product.id} className=\"comparison-product\">\n                <div className=\"comparison-fields\">{product.name}</div>\n                {this.state.price ? (\n                  <div className=\"comparison-fields\">{product.price}</div>\n                ) : null}\n                {this.state.colors ? (\n                  <div className=\"comparison-fields\">\n                    {product.colors.map(item => (\n                      <div\n                        key={\"color_\" + item + product.id}\n                        style={{ background: item }}\n                        className=\"comparison-colors\"\n                      />\n                    ))}\n                  </div>\n                ) : null}\n                {this.state.condition ? (\n                  <div\n                    className=\"comparison-fields\"\n                    style={{\n                      background:\n                        product.condition === \"Fresh\" ? \"#80FFA5\" : \"#E86176\",\n                      color: \"#FFF\"\n                    }}\n                  >\n                    {product.condition}\n                  </div>\n                ) : null}\n                {this.state.vendors ? (\n                  <div className=\"comparison-fields\">\n                    {product.vendors.map(item => (\n                      <div\n                        key={\"vendor_\" + item + product.id}\n                        style={{ marginRight: 5 }}\n                      >\n                        {item}\n                      </div>\n                    ))}\n                  </div>\n                ) : null}\n              </div>\n            ))}\n          </div>\n        ) : null}\n\n        {\n          // to show the modal on click of add/edit attributes\n        }\n\n        {this.state.showEditAttributes ? (\n          <div className=\"edit-attribute-modal\">\n            <div className=\"attribute-modal\">\n              <div className=\"attribute-modal-header\">\n                Add/Remove Attributes\n              </div>\n              <div className=\"attribute-modal-body\">\n                <div style={{ position: \"relative\" }}>\n                  <input\n                    placeholder=\"search attributes\"\n                    className=\"input-text-field\"\n                    type=\"text\"\n                    id=\"search\"\n                    name=\"search\"\n                    onChange={this.handleChange}\n                    value={this.state.search}\n                    autoComplete=\"off\"\n                  />\n                  {this.state.search && this.state.search.length ? (\n                    <img\n                      src={clearImage}\n                      className=\"clear-search-button\"\n                      onClick={this.clearSearch}\n                      alt=\"close\"\n                    />\n                  ) : null}\n                </div>\n                {this.renderCheckbox()}\n              </div>\n              <div className=\"attribute-modal-footer\">\n                <div\n                  className=\"attribute-modal-cancel\"\n                  onClick={this.cancelEditAttributes}\n                  style={{ marginRight: \"10px\" }}\n                >\n                  Cancel\n                </div>\n                <div\n                  className=\"attribute-modal-apply\"\n                  onClick={this.submitEditAttributes}\n                >\n                  Apply\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}